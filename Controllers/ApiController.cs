using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using ScoreMaster.Models;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.SignalR;
using ScoreMaster.Hubs;

namespace ScoreMaster.Controllers
{
    [ApiController, Route("[controller]/score")]
    public class ApiController : ControllerBase
    {
        private readonly ILogger<ApiController> _logger;
        private DataContext _dataContext;
        private readonly IHubContext<PymonHub> _hubContext;
        public ApiController(ILogger<ApiController> logger, DataContext db, IHubContext<PymonHub> hubContext)
        {
            _dataContext = db;
            _logger = logger;
            _hubContext = hubContext;
        }

        [HttpGet]
        [SwaggerOperation(summary: "returns all scores", null)]
        public ActionResult<IEnumerable<Score>> Get()
        {
            return _dataContext.Scores.ToArray();
        }

        [HttpGet("{id}")]
        [SwaggerOperation(summary: "returns specific score", null)]
        public async Task<ActionResult<Score>> Get(int id)
        {
            var score = await _dataContext.Scores.FindAsync(id);
            if (score == null)
            {
                return NotFound();
            }
            return score;
        }

        [HttpGet("top/{n}")]//, ApiExplorerSettings(IgnoreApi = true)]
        [SwaggerOperation(summary: "returns top {n} scores", description: "Scores will be sorted by Total in descending order")]
        public IEnumerable<Score> GetTop(int n)
        {
            return _dataContext.Scores.OrderByDescending(s => s.Total).Take(n).ToArray();
        }

        [HttpPost]
        [SwaggerOperation(summary: "add score to collection", description: "Only Name and Total should be specified (id and date will be autogenerated). <b>There is a 15 character limit for Name</b>.")]
        [ProducesResponseType(typeof(Score), 201), SwaggerResponse(201, "Created")]
        public async Task<ActionResult<Score>> Post([FromBody] Score score) {
            score.Date = DateTime.UtcNow;
            _dataContext.Add(score);
            await _dataContext.SaveChangesAsync();
            // only send message if the new score is in the top 10
            if (_dataContext.Scores.OrderByDescending(s => s.Total).Take(10).Any(s => s.Id == score.Id)){
                await _hubContext.Clients.All.SendAsync("ReceiveAddMessage", score.Id);
            }
            this.HttpContext.Response.StatusCode = 201;
            return score;
        }
        
        [HttpDelete("{id}")]
        [SwaggerOperation(summary: "delete score from collection", null)]
        [ProducesResponseType(typeof(Score), 204), SwaggerResponse(204, "No Content")]
        public async Task<ActionResult> Delete(int id)
        {
            var score = await _dataContext.Scores.FindAsync(id);

            if (score == null)
            {
                return NotFound();
            }

            var isInTop10 = _dataContext.Scores.OrderByDescending(s => s.Total).Take(10).Any(s => s.Id == score.Id);
            _dataContext.Scores.Remove(score);
            await _dataContext.SaveChangesAsync();
            // only send message if the deleted score is in the top 10
            if (isInTop10){
                await _hubContext.Clients.All.SendAsync("ReceiveDeleteMessage", id);
            }

            return NoContent();
        }
    }
}
